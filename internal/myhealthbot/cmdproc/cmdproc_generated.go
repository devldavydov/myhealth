package cmdproc

// Code generated by "go generate". DO NOT EDIT!

import (
	"time"
	"strings"

	"go.uber.org/zap"
	tele "gopkg.in/telebot.v4"
)	

const (
	_typeDate = "date"
	_typeFloatG0 = "floatG0"
)

func (r *CmdProcessor) process(c tele.Context, cmd string, userID int64) error {
	cmdParts := []string{}
	for _, part := range strings.Split(cmd, ",") {
		cmdParts = append(cmdParts, strings.Trim(part, " "))
	}

	if len(cmdParts) == 0 {
		r.logger.Error(
			"invalid command",
			zap.String("command", cmd),
			zap.Int64("userID", userID),
		)
		return c.Send(MsgErrInvalidCommand)
	}

	var resp []CmdResponse

	switch cmdParts[0] {
	case "w":
		resp = r._process_w("w", cmdParts[1:], userID)
	case "u":
		resp = r._process_u("u", cmdParts[1:], userID)
	case "h":
		resp = r._processHelp()
	default:
		r.logger.Error(
			"unknown command",
			zap.String("command", cmd),
			zap.Int64("userID", userID),
		)
		resp = NewSingleCmdResponse(MsgErrInvalidCommand)
	}	

	if r.debugMode {
		if err := c.Send("!!! ОТЛАДОЧНЫЙ РЕЖИМ !!!"); err != nil {
			return err
		}
	}

	for _, rItem := range resp {
		if err := c.Send(rItem.what, rItem.opts...); err != nil {
			return err
		}
	}

	return nil	
}

func (r *CmdProcessor) _process_w(baseCmd string, cmdParts []string, userID int64) []CmdResponse {
	if len(cmdParts) == 0 {
		r.logger.Error(
			"invalid command",
			zap.Strings("cmdParts", cmdParts),
			zap.Int64("userID", userID),
		)
		return NewSingleCmdResponse(MsgErrInvalidCommand)
	}

	var resp []CmdResponse

	switch cmdParts[0] {
	case "set":
	// Parse args
	// Call func
	// resp = r.weightSetCommand()
	case "del":
	// Parse args
	// Call func
	// resp = r.weightDelCommand()
	case "list":
	// Parse args
	// Call func
	// resp = r.weightListCommand()
	default:
		r.logger.Error(
			"invalid command",
			zap.Strings("cmdParts", cmdParts),
			zap.Int64("userID", userID),
		)
		resp = NewSingleCmdResponse(MsgErrInvalidCommand)
	}

	return resp
}

func (r *CmdProcessor) _process_u(baseCmd string, cmdParts []string, userID int64) []CmdResponse {
	if len(cmdParts) == 0 {
		r.logger.Error(
			"invalid command",
			zap.Strings("cmdParts", cmdParts),
			zap.Int64("userID", userID),
		)
		return NewSingleCmdResponse(MsgErrInvalidCommand)
	}

	var resp []CmdResponse

	switch cmdParts[0] {
	case "set":
	// Parse args
	// Call func
	// resp = r.userSettingsSetCommand()
	case "st":
	// Parse args
	// Call func
	// resp = r.userSettingsSetTemplateCommand()
	case "get":
	// Parse args
	// Call func
	// resp = r.userSettingsGetCommand()
	default:
		r.logger.Error(
			"invalid command",
			zap.Strings("cmdParts", cmdParts),
			zap.Int64("userID", userID),
		)
		resp = NewSingleCmdResponse(MsgErrInvalidCommand)
	}

	return resp
}

func (r *CmdProcessor) _processHelp() []CmdResponse {
	return nil
}

func (r *CmdProcessor) parseTimestamp(sTimestamp string) (time.Time, error) {
	var t time.Time
	var err error

	if sTimestamp == "" {
		t = time.Now().In(r.tz)
	} else {
		t, err = time.Parse("02.01.2006", sTimestamp)
		if err != nil {
			return time.Time{}, err
		}
	}

	return time.Date(t.Year(), t.Month(), t.Day(), 0, 0, 0, 0, r.tz), nil
}

func formatTimestamp(ts time.Time) string {
	return ts.Format("02.01.2006")
}
